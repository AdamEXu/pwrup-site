/* empty css                                      */
import { e as createComponent, f as createAstro, k as renderComponent, r as renderTemplate, l as defineScriptVars, h as addAttribute, m as maybeRenderHead } from '../../../chunks/astro/server_DEBWJpAb.mjs';
import { $ as $$Layout } from '../../../chunks/Layout_CfmU19EM.mjs';
import { $ as $$PostHogLayout } from '../../../chunks/PostHogLayout_DKe_lCLC.mjs';
import { g as getPostById } from '../../../chunks/kv_BGMYywOY.mjs';
import { r as requireAdmin, A as AuthError } from '../../../chunks/auth_DZR22y3g.mjs';
export { renderers } from '../../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const prerender = false;
const $$id = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$id;
  try {
    await requireAdmin(Astro2);
  } catch (e) {
    if (e instanceof AuthError) {
      if (e.status === 401) {
        return Astro2.redirect("/sign-in");
      }
      return new Response(e.message, { status: e.status });
    }
    return new Response("Server error", { status: 500 });
  }
  const post = await getPostById(Astro2.params.id);
  if (!post) {
    throw new Response(null, { status: 404 });
  }
  return renderTemplate`${renderComponent($$result, "PostHogLayout", $$PostHogLayout, {}, { "default": async ($$result2) => renderTemplate` ${renderComponent($$result2, "Layout", $$Layout, {}, { "default": async ($$result3) => renderTemplate(_a || (_a = __template([" ", '<div class="max-w-2xl mx-auto p-4"> <h1 class="text-2xl font-bold mb-4">Edit Post</h1> <form id="post-form" class="space-y-4"> <input id="title" type="text"', ' placeholder="Title" class="w-full p-2 border" required> <input id="slug" type="text"', ' placeholder="Slug" class="w-full p-2 border"> <textarea id="description" placeholder="Description" class="w-full p-2 border" required>', '</textarea> <input id="tags" type="text"', ' placeholder="Tags (comma separated)" class="w-full p-2 border"> <select id="status" class="w-full p-2 border"> <option value="draft"', '>Draft</option> <option value="published"', '>Published</option> </select> <input id="readingTime" type="number"', ' placeholder="Reading Time (min)" class="w-full p-2 border"> <textarea id="content" placeholder="Markdown content" class="w-full p-2 border h-48" required>', '</textarea> <div> <h2 class="font-semibold">Preview</h2> <div id="preview" class="border p-2 min-h-[100px]"></div> </div> <button type="submit" class="p-2 bg-blue-600 text-white rounded">Update Post</button> </form> <div class="flex gap-4 mt-4"> <button id="delete-btn" class="p-2 bg-red-600 text-white rounded">Delete Post</button> </div> <script type="module">', "\n        const POST_ID = postId;\n        const form = document.getElementById('post-form');\n        const title = document.getElementById('title');\n        const slug = document.getElementById('slug');\n        const description = document.getElementById('description');\n        const tags = document.getElementById('tags');\n        const status = document.getElementById('status');\n        const readingTime = document.getElementById('readingTime');\n        const content = document.getElementById('content');\n        const preview = document.getElementById('preview');\n\n        // Markdown preview\n        async function renderPreview() {\n          if (!content.value) {\n            preview.innerHTML = '<p class=\"text-gray-500\">Preview will appear here...</p>';\n            return;\n          }\n          try {\n            // Use a simpler markdown parser or basic HTML conversion\n            let html = content.value\n              .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n              .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n              .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n              .replace(/\\*\\*(.*)\\*\\*/gim, '<strong>$1</strong>')\n              .replace(/\\*(.*)\\*/gim, '<em>$1</em>')\n              .replace(/\\n/gim, '<br>');\n            preview.innerHTML = html;\n          } catch (error) {\n            preview.innerHTML = '<p class=\"text-red-500\">Error rendering preview</p>';\n          }\n        }\n        content.addEventListener('input', renderPreview);\n\n        // Form submission\n        form.addEventListener('submit', async (e) => {\n          e.preventDefault();\n\n          const body = {\n            title: title.value,\n            slug: slug.value,\n            description: description.value,\n            tags: tags.value.split(',').map(t => t.trim()).filter(Boolean),\n            status: status.value,\n            readingTime: readingTime.value ? parseInt(readingTime.value) : undefined,\n            content: content.value\n          };\n\n          try {\n            const res = await fetch(`/api/posts/${POST_ID}`, {\n              method: 'PUT',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(body)\n            });\n\n            if (res.ok) {\n              window.location.href = '/admin';\n            } else {\n              const error = await res.text();\n              alert('Error updating post: ' + error);\n            }\n          } catch (error) {\n            alert('Error updating post: ' + error.message);\n          }\n        });\n\n        // Delete functionality\n        document.getElementById('delete-btn').addEventListener('click', async () => {\n          if (confirm('Are you sure you want to delete this post? This action cannot be undone.')) {\n            try {\n              const res = await fetch(`/api/posts/${POST_ID}`, { method: 'DELETE' });\n              if (res.ok) {\n                window.location.href = '/admin';\n              } else {\n                const error = await res.text();\n                alert('Error deleting post: ' + error);\n              }\n            } catch (error) {\n              alert('Error deleting post: ' + error.message);\n            }\n          }\n        });\n\n        // Initial preview render\n        renderPreview();\n      <\/script> </div> "], [" ", '<div class="max-w-2xl mx-auto p-4"> <h1 class="text-2xl font-bold mb-4">Edit Post</h1> <form id="post-form" class="space-y-4"> <input id="title" type="text"', ' placeholder="Title" class="w-full p-2 border" required> <input id="slug" type="text"', ' placeholder="Slug" class="w-full p-2 border"> <textarea id="description" placeholder="Description" class="w-full p-2 border" required>', '</textarea> <input id="tags" type="text"', ' placeholder="Tags (comma separated)" class="w-full p-2 border"> <select id="status" class="w-full p-2 border"> <option value="draft"', '>Draft</option> <option value="published"', '>Published</option> </select> <input id="readingTime" type="number"', ' placeholder="Reading Time (min)" class="w-full p-2 border"> <textarea id="content" placeholder="Markdown content" class="w-full p-2 border h-48" required>', '</textarea> <div> <h2 class="font-semibold">Preview</h2> <div id="preview" class="border p-2 min-h-[100px]"></div> </div> <button type="submit" class="p-2 bg-blue-600 text-white rounded">Update Post</button> </form> <div class="flex gap-4 mt-4"> <button id="delete-btn" class="p-2 bg-red-600 text-white rounded">Delete Post</button> </div> <script type="module">', "\n        const POST_ID = postId;\n        const form = document.getElementById('post-form');\n        const title = document.getElementById('title');\n        const slug = document.getElementById('slug');\n        const description = document.getElementById('description');\n        const tags = document.getElementById('tags');\n        const status = document.getElementById('status');\n        const readingTime = document.getElementById('readingTime');\n        const content = document.getElementById('content');\n        const preview = document.getElementById('preview');\n\n        // Markdown preview\n        async function renderPreview() {\n          if (!content.value) {\n            preview.innerHTML = '<p class=\"text-gray-500\">Preview will appear here...</p>';\n            return;\n          }\n          try {\n            // Use a simpler markdown parser or basic HTML conversion\n            let html = content.value\n              .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n              .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n              .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n              .replace(/\\\\*\\\\*(.*)\\\\*\\\\*/gim, '<strong>$1</strong>')\n              .replace(/\\\\*(.*)\\\\*/gim, '<em>$1</em>')\n              .replace(/\\\\n/gim, '<br>');\n            preview.innerHTML = html;\n          } catch (error) {\n            preview.innerHTML = '<p class=\"text-red-500\">Error rendering preview</p>';\n          }\n        }\n        content.addEventListener('input', renderPreview);\n\n        // Form submission\n        form.addEventListener('submit', async (e) => {\n          e.preventDefault();\n\n          const body = {\n            title: title.value,\n            slug: slug.value,\n            description: description.value,\n            tags: tags.value.split(',').map(t => t.trim()).filter(Boolean),\n            status: status.value,\n            readingTime: readingTime.value ? parseInt(readingTime.value) : undefined,\n            content: content.value\n          };\n\n          try {\n            const res = await fetch(\\`/api/posts/\\${POST_ID}\\`, {\n              method: 'PUT',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(body)\n            });\n\n            if (res.ok) {\n              window.location.href = '/admin';\n            } else {\n              const error = await res.text();\n              alert('Error updating post: ' + error);\n            }\n          } catch (error) {\n            alert('Error updating post: ' + error.message);\n          }\n        });\n\n        // Delete functionality\n        document.getElementById('delete-btn').addEventListener('click', async () => {\n          if (confirm('Are you sure you want to delete this post? This action cannot be undone.')) {\n            try {\n              const res = await fetch(\\`/api/posts/\\${POST_ID}\\`, { method: 'DELETE' });\n              if (res.ok) {\n                window.location.href = '/admin';\n              } else {\n                const error = await res.text();\n                alert('Error deleting post: ' + error);\n              }\n            } catch (error) {\n              alert('Error deleting post: ' + error.message);\n            }\n          }\n        });\n\n        // Initial preview render\n        renderPreview();\n      <\/script> </div> "])), maybeRenderHead(), addAttribute(post.title, "value"), addAttribute(post.slug, "value"), post.description, addAttribute((post.tags || []).join(", "), "value"), addAttribute(post.status === "draft", "selected"), addAttribute(post.status === "published", "selected"), addAttribute(post.readingTime, "value"), post.content, defineScriptVars({ postId: post.id })) })} ` })}`;
}, "/Users/adam/Developer/pwrup-site/src/pages/admin/edit/[id].astro", void 0);

const $$file = "/Users/adam/Developer/pwrup-site/src/pages/admin/edit/[id].astro";
const $$url = "/admin/edit/[id]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$id,
  file: $$file,
  prerender,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
